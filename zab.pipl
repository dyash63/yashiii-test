pipeline {
    agent any

    environment {
        ANSIBLE_INVENTORY = "inventory.yaml"
        ANSIBLE_USER = 'root'
        ANSIBLE_PASSWORD = 'welcome@123'
        PATH = "/opt/homebrew/bin:${env.PATH}"
    }

    stages {
        stage('Checkout Repository') {
            steps {
                git branch: 'main', url: 'https://github.com/dyash63/yashiii-test.git'
            }
        }

        stage('Install Dependencies') {
            steps {
                sh '''
                    if ! command -v ansible &> /dev/null; then
                        echo "Installing Ansible..."
                        brew install ansible
                    fi
                    if ! command -v yq &> /dev/null; then
                        echo "Installing yq..."
                        brew install yq
                    fi
                    ansible --version
                    ansible-galaxy collection install community.general
                '''
            }
        }

        stage('Initialize Host Lists') {
            steps {
                script {
                    
                    env.HAP_HOSTS = sh(
                        script: "yq eval '.all.children.HAP.hosts | keys | .[]' ${env.ANSIBLE_INVENTORY}",
                        returnStdout: true
                    ).trim().replaceAll('\n', ',')

                    env.DB_HOSTS = sh(
                        script: "yq eval '.all.children.DB.hosts | keys | .[]' ${env.ANSIBLE_INVENTORY}",
                        returnStdout: true
                    ).trim().replaceAll('\n', ',')

                    echo "HAP Hosts: ${env.HAP_HOSTS}"
                    echo "DB Hosts: ${env.DB_HOSTS}"
                }
            }
        }

        stage('Reboot HAP Hosts') {
            when {
                expression { env.HAP_HOSTS }
            }
            steps {
                script {
                    def hapHostList = env.HAP_HOSTS.split(',')
                    for (host in hapHostList) {
                        def proceed = input(
                            id: "hap-reboot-${host}",
                            message: "Reboot HAP host ${host}?",
                            parameters: [
                                choice(name: 'action', choices: ['skip', 'continue', 'abort'], description: 'Select an action')
                            ]
                        )
                        
                        if (proceed == 'abort') {
                            error "Aborted by user. Stopping the pipeline."
                        } else if (proceed == 'continue') {
                            echo "Rebooting HAP host: ${host}"
                            def result = sh(
                                script: "ansible-playbook -i ${env.ANSIBLE_INVENTORY} --limit ${host} zabhapreboot.yaml --extra-vars \"ansible_user=${env.ANSIBLE_USER} ansible_password=${ANSIBLE_PASSWORD}\"",
                                returnStatus: true
                            )
                            if (result != 0) {
                                error "Reboot of HAP host ${host} failed!"
                            }
                        } else {
                            echo "Skipping reboot of HAP host: ${host}"
                        }
                    }
                }
            }
        }

        stage('DB Server Maintenance') {
            when {
                expression { env.DB_HOSTS }
            }
            steps {
                script {
                    def dbHostList = env.DB_HOSTS.split(',')
                    
                    // Initial Patroni status check
                    sh "ansible-playbook -i ${env.ANSIBLE_INVENTORY} check_patroni.yml --extra-vars \"ansible_user=${env.ANSIBLE_USER} ansible_password=${ANSIBLE_PASSWORD} target_host=${dbHostList[0]}\""
                    
                    // First DB server reboot
                    def firstHost = input(
                        id: 'first-db-host',
                        message: 'Select first DB server to reboot (avoid leader):',
                        parameters: [
                            [$class: 'ChoiceParameterDefinition', 
                             name: 'SERVER', 
                             choices: env.DB_HOSTS.replaceAll(',', '\n'), 
                             description: 'DB hosts']
                        ]
                    )
                    
                    def proceedFirstHost = input(
                        id: "first-db-reboot-${firstHost}",
                        message: "Reboot DB server ${firstHost}?",
                        parameters: [
                            choice(name: 'action', choices: ['skip', 'continue', 'abort'], description: 'Select an action')
                        ]
                    )
                    
                    if (proceedFirstHost == 'abort') {
                        error "Aborted by user. Stopping the pipeline."
                    } else if (proceedFirstHost == 'continue') {
                        echo "Rebooting first DB server: ${firstHost}"
                        sh "ansible-playbook -i ${env.ANSIBLE_INVENTORY} --limit ${firstHost} zabhapreboot.yaml --extra-vars \"ansible_user=${env.ANSIBLE_USER} ansible_password=${ANSIBLE_PASSWORD}\""
                    } else {
                        echo "Skipping reboot of first DB server: ${firstHost}"
                    }
                    
                    // Wait for stabilization
                    echo "Waiting 5 minutes for cluster stabilization..."
                    sleep(time: 5, unit: 'MINUTES')
                    
                    // Post-reboot status check
                    sh "ansible-playbook -i ${env.ANSIBLE_INVENTORY} check_patroni.yml --extra-vars \"ansible_user=${env.ANSIBLE_USER} ansible_password=${ANSIBLE_PASSWORD} target_host=${dbHostList[0]}\""
                    
                    // Second DB server reboot
                    def remainingHosts = dbHostList.findAll { it != firstHost }
                    if (remainingHosts) {
                        def secondHost = input(
                            id: 'second-db-host',
                            message: 'Select second DB server to reboot:',
                            parameters: [
                                [$class: 'ChoiceParameterDefinition', 
                                 name: 'SERVER', 
                                 choices: remainingHosts.join('\n'), 
                                 description: 'Remaining DB hosts']
                            ]
                        )
                        
                        def proceedSecondHost = input(
                            id: "second-db-reboot-${secondHost}",
                            message: "Reboot DB server ${secondHost}?",
                            parameters: [
                                choice(name: 'action', choices: ['skip', 'continue', 'abort'], description: 'Select an action')
                            ]
                        )
                        
                        if (proceedSecondHost == 'abort') {
                            error "Aborted by user. Stopping the pipeline."
                        } else if (proceedSecondHost == 'continue') {
                            echo "Rebooting second DB server: ${secondHost}"
                            sh "ansible-playbook -i ${env.ANSIBLE_INVENTORY} --limit ${secondHost} zabhapreboot.yaml --extra-vars \"ansible_user=${env.ANSIBLE_USER} ansible_password=${ANSIBLE_PASSWORD}\""
                        } else {
                            echo "Skipping reboot of second DB server: ${secondHost}"
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Reboot operations completed"
            archiveArtifacts artifacts: '*.log', allowEmptyArchive: true
        }
    }
}
