pipeline {
    agent any

    environment {
        ANSIBLE_INVENTORY = "inventory.yaml"
        ANSIBLE_USER = 'root'
        ANSIBLE_PASSWORD = 'welcome@123'
        PATH = "/opt/homebrew/bin:${env.PATH}"
    }

    stages {
        stage('Checkout Repository') {
            steps {
                git branch: 'main', url: 'https://github.com/dyash63/yashiii-test.git'
            }
        }

        stage('Install Dependencies') {
            steps {
                sh '''
                    if ! command -v ansible &> /dev/null; then
                        echo "Installing Ansible..."
                        brew install ansible
                    fi
                    if ! command -v yq &> /dev/null; then
                        echo "Installing yq..."
                        brew install yq
                    fi
                    ansible --version
                    ansible-galaxy collection install community.general
                '''
            }
        }

        stage('Reboot HAP Hosts (One by One)') {
            steps {
                script {
                    def hapHosts = sh(script: "yq eval '.all.children.HAP.hosts | keys | .[]' ${env.ANSIBLE_INVENTORY}", returnStdout: true).trim().split('\n')

                    for (host in hapHosts) {
                        def userChoice = input(
                            id: "reboot-${host}",
                            message: "Reboot HAP host: ${host}?",
                            ok: "Reboot",
                            parameters: [
                                choice(
                                    name: 'Proceed',
                                    choices: ['yes', 'no'],
                                    description: "Proceed with reboot of ${host}?"
                                )
                            ]
                        )

                        if (userChoice == 'yes') {
                            echo "Rebooting HAP host: ${host}"
                            def result = sh(
                                script: "ansible-playbook -i ${env.ANSIBLE_INVENTORY} zabhapreboot.yaml --limit ${host} --extra-vars \"ansible_user=${env.ANSIBLE_USER} ansible_password=${ANSIBLE_PASSWORD} hap_reboot=true\"",
                                returnStatus: true
                            )
                            if (result != 0) {
                                error "Reboot of HAP host ${host} failed!"
                            }
                        } else {
                            echo "Skipping reboot of HAP host: ${host}"
                        }
                    }
                }
            }
        }

        stage('Initialize DB Hosts') {
            steps {
                script {
                    def dbHostsOutput = sh(
                        script: "yq eval '.all.children.DB.hosts | keys | .[]' ${env.ANSIBLE_INVENTORY}",
                        returnStdout: true
                    ).trim()

                    def dbHosts = dbHostsOutput ? dbHostsOutput.split("\\r?\\n") : []

                    if (dbHosts.size() == 0) {
                        error "No DB hosts found in inventory."
                    }

                    echo "Discovered DB Hosts: ${dbHosts}"
                    env.DB_HOSTS = dbHosts.join(',')
                }
            }
        }

        stage('Prompt to Reboot First DB Server') {
            steps {
                script {
                    def dbHosts = env.DB_HOSTS.split(',')

                    def selectedHost = input(
                        message: "Select the first DB host to reboot (avoid the Patroni leader):",
                        parameters: [
                            choice(name: 'SERVER', choices: dbHosts, description: 'Choose a DB server to reboot first')
                        ]
                    )
                    env.FIRST_DB = selectedHost

                    echo "Rebooting: ${env.FIRST_DB}"
                    def result = sh(
                        script: "ansible-playbook -i ${env.ANSIBLE_INVENTORY} zabhapreboot.yaml --extra-vars \"ansible_user=${env.ANSIBLE_USER} ansible_password=${env.ANSIBLE_PASSWORD} target_host=${env.FIRST_DB}\"",
                        returnStatus: true
                    )
                    if (result != 0) {
                        error "Reboot of DB server ${env.FIRST_DB} failed!"
                    }
                }
            }
        }

        stage('Wait and Check Patroni Status') {
            steps {
                script {
                    echo "⏳ Waiting 5 minutes for stabilization..."
                    sleep(time: 5, unit: 'MINUTES')

                    def dbHosts = env.DB_HOSTS.split(',')
                    def checkHost = dbHosts.find { it != env.FIRST_DB }

                    echo "Checking Patroni status on: ${checkHost}"
                    def statusCheck = sh(
                        script: "ansible-playbook -i ${env.ANSIBLE_INVENTORY} check_patroni.yml --extra-vars \"ansible_user=${env.ANSIBLE_USER} ansible_password=${env.ANSIBLE_PASSWORD} target_host=${checkHost}\"",
                        returnStatus: true
                    )
                    if (statusCheck != 0) {
                        error "Patroni status check failed on ${checkHost}"
                    }
                    env.SECOND_DB = checkHost
                }
            }
        }

        stage('Prompt to Reboot Second DB Server') {
            steps {
                script {
                    def confirm = input(
                        message: "Ready to reboot second DB server (${env.SECOND_DB})?",
                        parameters: [
                            booleanParam(defaultValue: true, description: "Reboot ${env.SECOND_DB} now?", name: 'proceed')
                        ]
                    )
                    if (confirm) {
                        echo "Rebooting second DB server: ${env.SECOND_DB}"
                        def result = sh(
                            script: "ansible-playbook -i ${env.ANSIBLE_INVENTORY} zabhapreboot.yaml --extra-vars \"ansible_user=${env.ANSIBLE_USER} ansible_password=${env.ANSIBLE_PASSWORD} target_host=${env.SECOND_DB}\"",
                            returnStatus: true
                        )
                        if (result != 0) {
                            error "Reboot of DB server ${env.SECOND_DB} failed!"
                        }
                    } else {
                        echo "Skipping reboot of ${env.SECOND_DB}"
                    }
                }
            }
        }
    }

    post {
        success {
            echo "✅ All reboots completed successfully!"
        }
        failure {
            echo "❌ One or more stages failed. Please check the logs."
        }
        always {
            archiveArtifacts artifacts: '*.log', allowEmptyArchive: true
        }
    }
}
