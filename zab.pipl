pipeline {
    agent any

    environment {
        ANSIBLE_INVENTORY = 'inventory.yaml'
        ANSIBLE_USER = 'root'
        ANSIBLE_PASSWORD = 'welcome@123'
        PATH = "/opt/homebrew/bin:${env.PATH}"
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/dyash63/yashiii-test.git'
            }
        }

        stage('Install Ansible Dependencies') {
            steps {
                sh '''
                    if ! command -v ansible &> /dev/null; then
                        echo "Ansible is not installed. Installing..."
                        brew install ansible
                    fi
                    ansible --version
                    ansible-galaxy collection install community.general
                '''
            }
        }

        stage('Patch All Hosts') {
            steps {
                script {
                    def exitCode = sh(script: 'ansible-playbook -i ${ANSIBLE_INVENTORY} capatchup0704.yaml --extra-vars "ansible_user=${ANSIBLE_USER} ansible_password=${ANSIBLE_PASSWORD}"', returnStatus: true)
                    if (exitCode != 0) {
                        error "Patching failed! Check logs."
                    }
                }
            }
        }

        stage('Zab Hosts reboot') {
            steps {
                // Prompt for Zabhap04 reboot
                input message: 'Proceed with reboot of Zabhap04 host?', ok: 'Yes'
                
                withPythonEnv('python3') {
                    withCredentials([usernamePassword(credentialsId: 'ANSIBLE_SUDO_PASS_PSW', usernameVariable: 'SUDO_USER', passwordVariable: 'SUDO_PASS')]) {
                        ansiblePlaybook([
                            playbook: 'cloudstore_reboot.yaml',
                            credentialsId: 'ANSIBLE_SUDO_PASS_PSW',
                            inventory: 'config/cloudstore_inventory.yaml',
                            extraVars: [
                                slack_token: env.SLACK_TOKEN,
                                ansible_sudo_pass: SUDO_PASS,
                                target_group: 'ending_04',          // Target hosts ending in 04
                                host_filter: 'zabhap.*04'           // Regex filter for zabhap hosts ending in 04
                            ]
                        ])
                    }
                }

                // Wait for Zabhap03 to be up and prompt for its reboot
                withPythonEnv('python3') {
                    withCredentials([usernamePassword(credentialsId: 'ANSIBLE_SUDO_PASS_PSW', usernameVariable: 'SUDO_USER', passwordVariable: 'SUDO_PASS')]) {
                        ansiblePlaybook([
                            playbook: 'cloudstore_reboot.yaml',
                            credentialsId: 'ANSIBLE_SUDO_PASS_PSW',
                            inventory: 'config/cloudstore_inventory.yaml',
                            extraVars: [
                                slack_token: env.SLACK_TOKEN,
                                ansible_sudo_pass: SUDO_PASS,
                                target_group: 'ending_03',          // Target hosts ending in 03
                                host_filter: 'zabhap.*03',          // Regex filter for zabhap hosts ending in 03
                                wait_for_host: 'zabhap.*03'         // Wait for Zabhap03 specifically (regex match)
                            ]
                        ])
                    }
                }
            }
        }
    }

    post {
        success {
            echo "Patching and reboots completed successfully."
        }
        failure {
            echo "One or more stages failed. Check logs."
        }
        always {
            archiveArtifacts artifacts: '*.log', allowEmptyArchive: true
        }
    }
}
