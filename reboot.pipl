pipeline {
    agent any

    environment {
        ANSIBLE_INVENTORY = 'inventory.ini'
        ANSIBLE_USER = 'root'
        ANSIBLE_PASSWORD = 'welcome@123'
        PATH = "/opt/homebrew/bin:${env.PATH}"
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/dyash63/yashiii-test.git'
            }
        }

        stage('Install Ansible Dependencies') {
            steps {
                sh '''
                    if ! command -v ansible &> /dev/null; then
                        echo "Ansible is not installed. Installing..."
                        brew install ansible
                    fi
                    ansible --version
                    ansible-galaxy collection install community.general
                '''
            }
        }

        stage('User Input for Reboot Hosts') {
            steps {
                script {
                    // Ask for the list of hosts only once
                    env.SELECTED_HOSTS = input(
                        message: 'Enter the hosts to reboot (comma-separated):',
                        parameters: [string(defaultValue: '', description: 'Example: host01,host02,host03', name: 'Hosts')]
                    )
                    echo "Hosts selected: ${env.SELECTED_HOSTS}"
                }
            }
        }

        stage('Run Reboot Playbook') {
            steps {
                script {
                    def exitCode = sh(script: """
                        ansible-playbook -i ${ANSIBLE_INVENTORY} reboot_playbook.yaml \
                        --extra-vars "ansible_user=${ANSIBLE_USER} ansible_password=${ANSIBLE_PASSWORD} target_hosts='${SELECTED_HOSTS}'"
                    """, returnStatus: true)

                    if (exitCode != 0) {
                        error "Reboot playbook failed! Check logs."
                    }
                }
            }
        }
    }

    post {
        success {
            echo "Reboot process completed successfully."
        }
        failure {
            echo "Reboot process failed. Check logs."
        }
        always {
            archiveArtifacts artifacts: '*.log', allowEmptyArchive: true
        }
    }
}
