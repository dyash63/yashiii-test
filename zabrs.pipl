pipeline {
    agent any

    environment {
        ANSIBLE_INVENTORY = "inventory.yaml"
        ANSIBLE_USER = 'root'
        ANSIBLE_PASSWORD = 'welcome@123'
        PATH = "/opt/homebrew/bin:${env.PATH}"
    }

    stages {
        stage('Checkout Repository') {
            steps {
                git branch: 'main', url: 'https://github.com/dyash63/yashiii-test.git'
            }
        }

        stage('Install Dependencies') {
            steps {
                sh '''
                    if ! command -v ansible &> /dev/null; then
                        echo "Installing Ansible..."
                        brew install ansible
                    fi
                    if ! command -v yq &> /dev/null; then
                        echo "Installing yq..."
                        brew install yq
                    fi
                    ansible --version
                    ansible-galaxy collection install community.general
                '''
            }
        }

        stage('Initialize Host Lists') {
            steps {
                script {
                    env.RS_HOSTS = sh(
                        script: "yq eval '.all.children.RS.hosts | keys | .[]' ${env.ANSIBLE_INVENTORY}",
                        returnStdout: true
                    ).trim().replaceAll('\n', ',')

                    echo "RS Hosts: ${env.RS_HOSTS}"
                }
            }
        }

        stage('Reboot RS Host') {
            steps {
                script {
                    // Select the first host from RS_HOSTS for pcs status
                    def firstHost = env.RS_HOSTS.split(',')[0]
                    echo "Running pcs status on ${firstHost} to inform host selection..."

                    def pcsStatus = sh(
                        script: """
                            ansible ${firstHost} -i ${env.ANSIBLE_INVENTORY} -m shell \
                            -a 'hostname' \
                            -u ${env.ANSIBLE_USER} -e ansible_password=${ANSIBLE_PASSWORD}
                        """,
                        returnStdout: true
                    ).trim()
                    echo "PCS Status Output:\n${pcsStatus}"

                    // Prompt user to select a host for reboot after seeing pcs status
                    def rebootHost = input(
                        id: 'select-rs-host',
                        message: 'Select the RS host to reboot (based on PCS status above):',
                        parameters: [
                            [$class: 'ChoiceParameterDefinition',
                             name: 'RS_HOST_REBOOT',
                             choices: env.RS_HOSTS.replaceAll(',', '\n'),
                             description: 'Select RS host to reboot']
                        ]
                    )

                    echo "Rebooting ${rebootHost}..."
                    sh """
                        ansible-playbook -i ${env.ANSIBLE_INVENTORY} --limit ${rebootHost} zabhapreboot.yaml \
                        --extra-vars \"ansible_user=${env.ANSIBLE_USER} ansible_password=${ANSIBLE_PASSWORD}\"
                    """

                    echo "Waiting 1 minute post-reboot..."
                    sleep(time: 60, unit: 'SECONDS')

                    sh """
                        ansible ${rebootHost} -i ${env.ANSIBLE_INVENTORY} -m shell \
                        -a 'hostname' \
                        -u ${env.ANSIBLE_USER} -e ansible_password=${ANSIBLE_PASSWORD}
                    """
                }
            }
        }

        stage('Standby and Reboot RS Host') {
            steps {
                script {
                    def standbyHost = input(
                        id: 'standby-rs-host',
                        message: 'Select the RS host to put into standby:',
                        parameters: [
                            [$class: 'ChoiceParameterDefinition',
                             name: 'RS_HOST_STANDBY',
                             choices: env.RS_HOSTS.replaceAll(',', '\n'),
                             description: 'Select RS host to place in standby']
                        ]
                    )

                    echo "Putting ${standbyHost} into standby..."
                    sh """
                        ansible ${standbyHost} -i ${env.ANSIBLE_INVENTORY} -m shell \
                        -a 'echo ${standbyHost}' \
                        -u ${env.ANSIBLE_USER} -e ansible_password=${ANSIBLE_PASSWORD}
                    """

                    echo "Waiting 1 minute before checking pcs status..."
                    sleep(time: 60, unit: 'SECONDS')

                    echo "Running pcs status on ${standbyHost}..."
                    def pcsStatus = sh(
                        script: """
                            ansible ${standbyHost} -i ${env.ANSIBLE_INVENTORY} -m shell \
                            -a 'hostname' \
                            -u ${env.ANSIBLE_USER} -e ansible_password=${ANSIBLE_PASSWORD}
                        """,
                        returnStdout: true
                    ).trim()
                    echo "PCS Status Output:\n${pcsStatus}"

                    def proceedWithReboot = input(
                        id: 'confirm-reboot',
                        message: "PCS status for ${standbyHost} shown above. Proceed with reboot?",
                        parameters: [
                            [$class: 'BooleanParameterDefinition',
                             name: 'PROCEED',
                             defaultValue: false,
                             description: 'Check to confirm reboot']
                        ]
                    )

                    if (proceedWithReboot) {
                        echo "Rebooting standby host ${standbyHost}..."
                        sh """
                            ansible-playbook -i ${env.ANSIBLE_INVENTORY} --limit ${standbyHost} zabhapreboot.yaml \
                            --extra-vars \"ansible_user=${env.ANSIBLE_USER} ansible_password=${ANSIBLE_PASSWORD}\"
                        """

                        echo "Waiting 1 minute post-reboot..."
                        sleep(time: 60, unit: 'SECONDS')

                        sh """
                            ansible ${standbyHost} -i ${env.ANSIBLE_INVENTORY} -m shell \
                            -a 'pcs status' \
                            -u ${env.ANSIBLE_USER} -e ansible_password=${ANSIBLE_PASSWORD}
                        """

                        echo "Unstanding ${standbyHost}..."
                        sh """
                            ansible ${standbyHost} -i ${env.ANSIBLE_INVENTORY} -m shell \
                            -a 'echo ${standbyHost}' \
                            -u ${env.ANSIBLE_USER} -e ansible_password=${ANSIBLE_PASSWORD}
                        """

                        sh """
                            ansible ${standbyHost} -i ${env.ANSIBLE_INVENTORY} -m shell \
                            -a 'hostname' \
                            -u ${env.ANSIBLE_USER} -e ansible_password=${ANSIBLE_PASSWORD}
                        """
                    } else {
                        echo "Reboot of ${standbyHost} skipped as per user choice."
                    }
                }
            }
        }
    }

    post {
        always {
            echo "RS node maintenance flow completed."
            archiveArtifacts artifacts: '*.log', allowEmptyArchive: true
        }
    }
}
