pipeline {
    agent any

    environment {
        ANSIBLE_INVENTORY = "inventory.yaml"
        ANSIBLE_USER = 'root'
        ANSIBLE_PASSWORD = 'welcome@123'
        PATH = "/opt/homebrew/bin:${env.PATH}"
    }

    stages {
        stage('Checkout Repository') {
            steps {
                git branch: 'main', url: 'https://github.com/dyash63/yashiii-test.git'
            }
        }

        stage('Install Dependencies') {
            steps {
                sh '''
                    if ! command -v ansible &> /dev/null; then
                        echo "Installing Ansible..."
                        brew install ansible
                    fi
                    if ! command -v yq &> /dev/null; then
                        echo "Installing yq..."
                        brew install yq
                    fi
                    ansible --version
                    ansible-galaxy collection install community.general
                '''
            }
        }

        stage('Initialize Host Lists') {
            steps {
                script {
                    env.HAP_HOSTS = sh(
                        script: "yq eval '.all.children.HAP.hosts | keys | .[]' ${env.ANSIBLE_INVENTORY}",
                        returnStdout: true
                    ).trim().replaceAll('\n', ',')

                    env.DB_HOSTS = sh(
                        script: "yq eval '.all.children.DB.hosts | keys | .[]' ${env.ANSIBLE_INVENTORY}",
                        returnStdout: true
                    ).trim().replaceAll('\n', ',')

                    env.RS_HOSTS = sh(
                        script: "yq eval '.all.children.RS.hosts | keys | .[]' ${env.ANSIBLE_INVENTORY}",
                        returnStdout: true
                    ).trim().replaceAll('\n', ',')

                    echo "HAP Hosts: ${env.HAP_HOSTS}"
                    echo "DB Hosts: ${env.DB_HOSTS}"
                    echo "RS Hosts: ${env.RS_HOSTS}"
                }
            }
        }

        stage('RS - Hostname Check') {
            steps {
                script {
                    def rsList = env.RS_HOSTS.split(',')
                    def statusHost = rsList[0] // pick any one RS node to run hostname

                    sh """
                        ansible ${statusHost} -i ${env.ANSIBLE_INVENTORY} -m shell -a 'hostname' \
                        -u ${env.ANSIBLE_USER} -e ansible_password='${ANSIBLE_PASSWORD}'
                    """
                }
            }
        }

        stage('RS - Node Standby (Mocked)') {
            steps {
                script {
                    def selectedRSHost = input(
                        id: 'standby-rs-node',
                        message: 'Select the RS host to run mock standby (hostname; date):',
                        parameters: [
                            [$class: 'ChoiceParameterDefinition',
                             name: 'RS_HOST',
                             choices: env.RS_HOSTS.replaceAll(',', '\n'),
                             description: 'Select RS host']
                        ]
                    )

                    echo "Mocking standby for ${selectedRSHost}..."

                    sh """
                        ansible ${selectedRSHost} -i ${env.ANSIBLE_INVENTORY} -m shell -a 'hostname; date' \
                        -u ${env.ANSIBLE_USER} -e ansible_password='${ANSIBLE_PASSWORD}'
                    """

                    // Post-standby mock status
                    sh """
                        ansible ${selectedRSHost} -i ${env.ANSIBLE_INVENTORY} -m shell -a 'hostname' \
                        -u ${env.ANSIBLE_USER} -e ansible_password='${ANSIBLE_PASSWORD}'
                    """
                }
            }
        }

        stage('RS - Reboot Host') {
            steps {
                script {
                    def rebootHost = input(
                        id: 'reboot-rs-node',
                        message: 'Select the RS host to reboot:',
                        parameters: [
                            [$class: 'ChoiceParameterDefinition',
                             name: 'REBOOT_RS_HOST',
                             choices: env.RS_HOSTS.replaceAll(',', '\n'),
                             description: 'Select RS host to reboot']
                        ]
                    )

                    echo "Rebooting ${rebootHost}..."

                    sh """
                        ansible-playbook -i ${env.ANSIBLE_INVENTORY} --limit ${rebootHost} zabhapreboot.yaml \
                        --extra-vars \"ansible_user=${env.ANSIBLE_USER} ansible_password=${ANSIBLE_PASSWORD}\"
                    """

                    echo "Waiting 1 minute post-reboot..."
                    sleep(time: 60, unit: 'SECONDS')

                    // Mock unstandby
                    sh """
                        ansible ${rebootHost} -i ${env.ANSIBLE_INVENTORY} -m shell -a 'hostname' \
                        -u ${env.ANSIBLE_USER} -e ansible_password='${ANSIBLE_PASSWORD}'
                    """
                }
            }
        }
    }

    post {
        always {
            echo "RS node mock maintenance flow completed."
            archiveArtifacts artifacts: '*.log', allowEmptyArchive: true
        }
    }
}
