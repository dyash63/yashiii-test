pipeline {
    agent any // Runs on any available Jenkins agent

    environment {
        ANSIBLE_PLAYBOOK = 'caplay.yaml' // Name of your playbook file
        ANSIBLE_INVENTORY = 'inventory.ini' // Path to your Ansible inventory file
        ANSIBLE_USER = 'root' // Define your username
        ANSIBLE_PASSWORD = 'welcome@123' // Define your password
        // Set PATH to include Homebrew's bin directory (adjust according to your installation)
        PATH = "/opt/homebrew/bin:${env.PATH}" // For Apple Silicon; for Intel: /usr/local/bin
    }

    stages {
        stage('Checkout Code') {
            steps {
                // Pull the playbook and inventory from a Git repository
                git branch: 'main', url: 'https://github.com/dyash63/yashiii-test.git'
            }
        }

        stage('Install Ansible Dependencies') {
            steps {
                // Ensure Ansible and required tools are installed
                sh '''
                    if ! command -v ansible &> /dev/null; then
                        echo "Ansible is not installed. Installing..."
                        brew install ansible
                    fi
                    ansible --version
                    ansible-galaxy collection install community.general
                '''
            }
        }

        stage('Run Ansible Playbook') {
            steps {
                // Execute the Ansible playbook
                sh """
                    ansible-playbook \
                        -i ${ANSIBLE_INVENTORY} \
                        ${ANSIBLE_PLAYBOOK} \
                        --extra-vars "ansible_user=${ANSIBLE_USER}" \
                        --extra-vars "ansible_password=${ANSIBLE_PASSWORD}" \
                        -v
                """
            }
        }
    }

    post {
        success {
            // Notify on success (you can add any custom steps here if needed)
            echo "Ansible Playbook *${ANSIBLE_PLAYBOOK}* completed successfully."
        }
        failure {
            // Notify on failure (you can add any custom steps here if needed)
            echo "Ansible Playbook *${ANSIBLE_PLAYBOOK}* failed. Check logs for details."
        }
        always {
            // Archive logs or artifacts (optional)
            archiveArtifacts artifacts: '*.log', allowEmptyArchive: true
        }
    }
}
